name: Docker Image CI

on:
  push:
    branches: 
      - "main"
      - "devel"
  pull_request:
    branches: 
      - "main"
      - "devel"
    paths:
      - '**.java'
      - '**/build.gradle*'
      - '**/settings.gradle*'
      - '**/application*.yml'
      - '**.sql'

jobs:
  build:
    if: github.repository == 'ssg-240304-java2/final-whiskey'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      # - name: Set YML
      #   run: |
      #     mkdir -p src/main/resources
      #     echo "${{ secrets.APPLICATION_YML }}" | base64 --decode > src/main/resources/application.yml
      #     find src
      - name: Set Yaml
        uses: microsoft/variable-substitution@v1
        with:
          files: src/main/resources/application.yml
        env:
          spring.datasource.url: ${{ secrets.DB_URL }}
          spring.datasource.username: ${{ secrets.DB_USERNAME }}
          spring.datasource.password: ${{ secrets.DB_PASSWORD }}
          kakao.apikey: ${{ secrets.KAKAOMAP_API }}
          register.api : ${{ secrets.BUSINESS_API }}
          spring.security.oauth2.client.registration.naver.client-id: ${{ secrets.NAVER_CLIENT_ID }}
          spring.security.oauth2.client.registration.naver.client-secret: ${{ secrets.NAVER_CLIENT_SECRET }}
          spring.security.oauth2.client.registration.google.client-id: ${{secrets.GOOGLE_CLIENT_ID}}
          spring.security.oauth2.client.registration.google.client-secret: ${{secrets.GOOGLE_CLIENT_SECRET}}
          
      - name: Grant permission for gradlew
        run: chmod +x ./gradlew
      - name: Build with Gradle
        run: ./gradlew clean build -x test
      - name: Docker build and publish
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ vars.APP_NAME }}:${{ github.ref_name }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ vars.APP_NAME }}:${{ github.ref_name }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: NCP SSH Login and Docker Image pull and run
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.NCP_HOST }}
          username: ${{ secrets.NCP_USERNAME }}
          password: ${{ secrets.NCP_PASSWORD }}
          script: |
            sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            sudo docker stop ${{ vars.APP_NAME }}
            sudo docker rm -f ${{ vars.APP_NAME }}
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ vars.APP_NAME }}:main
            sudo docker run -d --name ${{ vars.APP_NAME }} -p 51032:8080 ${{ secrets.DOCKER_USERNAME }}/${{ vars.APP_NAME }}:main
            sudo docker image prune -f

  deploy_devel:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/devel'
    steps:
      - name: NCP SSH Login and Docker Image pull and run
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEV_NCP_HOST }}
          username: ${{ secrets.DEV_NCP_USERNAME }}
          password: ${{ secrets.DEV_NCP_PASSWORD }}
          port: ${{ secrets.DEV_NCP_PORT }}
          script: |
            zsh
            echo ${{ secrets.DEV_NCP_PASSWORD }} | sudo -S docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
            echo ${{ secrets.DEV_NCP_PASSWORD }} | sudo -S docker stop ${{ vars.APP_NAME }}
            echo ${{ secrets.DEV_NCP_PASSWORD }} | sudo -S docker rm -f ${{ vars.APP_NAME }}
            echo ${{ secrets.DEV_NCP_PASSWORD }} | sudo -S docker pull ${{ secrets.DOCKER_USERNAME }}/${{ vars.APP_NAME }}:devel
            echo ${{ secrets.DEV_NCP_PASSWORD }} | sudo -S docker run -d --name ${{ vars.APP_NAME }} -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/${{ vars.APP_NAME }}:devel
            echo ${{ secrets.DEV_NCP_PASSWORD }} | sudo -S docker image prune -f
